/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tbd;
import tbd.Masuk;

//import tbd.SignUpKendaraan;
import java.sql.Connection;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JTextField;

public class HalamanUtama extends javax.swing.JFrame {
public static String nomerPol;
//    String nomerPoll;
   
//    System.out.println(id);

//        SignUpKendaraan suk = new SignUpKendaraan();
//        String nn = suk.nopol;
        
    public HalamanUtama() {
        initComponents();
        
        Connect();
        ids();
//        nop();
        labNama();
//        tambahNopol(nn);
        GregorianCalendar date = new GregorianCalendar();

        detik = date.get(Calendar.SECOND);
        menit = date.get(Calendar.MINUTE);
        jam = date.get(Calendar.HOUR_OF_DAY);
        hari = date.get(Calendar.DAY_OF_MONTH);
        bulan = date.get(Calendar.MONTH);
        tahun = date.get(Calendar.YEAR);

        Tgl1 = tahun + "" + bulan + "" + hari;
        Tgl = hari + "-" + bulan + "-" + tahun;
        Jm = jam + ":" + menit + ":" + detik;
        
        txtNopol.requestFocus();
    }
    // Menyiapkan objek yang diperlukan untuk mengelola database
    Connection conn;
    Statement stmt, stmt1,stmt2;
    ResultSet rs, rs1, rs2, rs3, rs4, rs5, rsmPenuh,rscPenuh;
    PreparedStatement pst,pst1;
    String Jm, Tgl1, Tgl;
    int detik, menit, jam, hari, bulan, tahun;
// Membuat Connnect Function
    public void Connect() {
        String url = "jdbc:jtds:sqlserver://127.0.0.1:1433/SmartParking"; //buka =  nama database yang digunakan 
        try {
            conn = DriverManager.getConnection(url, "kelompok3", "semangat");
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseStaff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void ids(){
        
        Masuk masuk = new Masuk();
        String id = masuk.idStaff;
        txtIDStaff.setText(id);
       
    }
    public void nop(){
        txtNopol.setText(nomerPol);
    }
    public void labNama(){
        try {
            pst = conn.prepareStatement("select NamaStaff from Staff where IDStaff ='" + txtIDStaff.getText() + "'");
            rs = pst.executeQuery();
            if (rs.next()){
                String NStaff = rs.getString("NamaStaff");
                labelNama.setText(NStaff);
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(HalamanUtama.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
//    public void nopoll(){
//        System.out.println("ndek kene");
//        SignUpKendaraan nop = new SignUpKendaraan();
//        String n = nop.nopol;
//        txtNopol.setText(n);
//        System.out.println(n);
//    }
    public void tambahNopol(JTextField jtf,String n){
        jtf.setText(n);
    }
    public JTextField getNopol(){
        return this.txtNopol;
    }
    public void setNopol(JTextField n){
        this.txtNopol=n;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNopol = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonKeluar = new javax.swing.JButton();
        txtIDStaff = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonParkir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        karcis = new javax.swing.JTextArea();
        labelNama = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu Utama");
        setBackground(new java.awt.Color(255, 255, 51));

        jPanel1.setBackground(new java.awt.Color(255, 230, 208));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(139, 69, 19));
        jLabel3.setText("ID Staff");

        txtNopol.setBackground(new java.awt.Color(255, 248, 220));
        txtNopol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNopolActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 230, 208));
        jLabel1.setFont(new java.awt.Font("Kristen ITC", 0, 27)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Asus\\Documents\\NetBeansProjects\\TBD\\src\\images\\icons8-parking-64.png")); // NOI18N
        jLabel1.setText("Welcome to Smart Parking,");

        jButtonKeluar.setBackground(new java.awt.Color(244, 164, 96));
        jButtonKeluar.setIcon(new javax.swing.ImageIcon("C:\\Users\\Asus\\Documents\\NetBeansProjects\\TBD\\src\\images\\icons8-card-payment-24.png")); // NOI18N
        jButtonKeluar.setText("Keluar");
        jButtonKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKeluarActionPerformed(evt);
            }
        });

        txtIDStaff.setBackground(new java.awt.Color(255, 248, 220));
        txtIDStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDStaffActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(139, 69, 19));
        jLabel2.setText("Nomor Polisi");

        jButtonParkir.setBackground(new java.awt.Color(244, 164, 96));
        jButtonParkir.setIcon(new javax.swing.ImageIcon("C:\\Users\\Asus\\Documents\\NetBeansProjects\\TBD\\src\\images\\icons8-parking-24.png")); // NOI18N
        jButtonParkir.setText("Parkir");
        jButtonParkir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParkirActionPerformed(evt);
            }
        });

        karcis.setBackground(new java.awt.Color(255, 248, 220));
        karcis.setColumns(20);
        karcis.setRows(5);
        jScrollPane1.setViewportView(karcis);

        labelNama.setBackground(new java.awt.Color(255, 230, 208));
        labelNama.setFont(new java.awt.Font("Kristen ITC", 0, 27)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNopol, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtIDStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(67, 67, 67)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonKeluar)
                                            .addComponent(jButtonParkir, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelNama, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelNama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIDStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParkir)
                    .addComponent(jLabel3))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNopol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonKeluar)))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 235, 205));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setForeground(new java.awt.Color(139, 69, 19));
        jMenuBar1.setToolTipText("");

        jMenu1.setText("Database");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Kendaraan");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Staff");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem6.setText("Lokasi");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Map");

        jMenuItem4.setText("Mobil");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Motor");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Log Out");

        jMenuItem3.setText("Keluar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonParkirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParkirActionPerformed
      nomerPol = txtNopol.getText();
        if(txtIDStaff.getText().equals("") || txtNopol.getText().equals("")){
           JOptionPane.showMessageDialog(null,"Masukkan ID Staff dan Nomor Polisi"); 
        }
      else{
       String Staff = txtIDStaff.getText();
        //Check Point
        System.out.println(Staff);
        String NoPol = txtNopol.getText();

        try {
            
            pst = conn.prepareStatement("select * from Staff where IDStaff ='" + Staff + "'");
            rs = pst.executeQuery();

            if (rs.next() && Staff.equals(rs.getString("IDStaff").replaceAll("\\s", ""))) {
                String IDS = rs.getString("IDStaff");
                String NStaff = rs.getString("NamaStaff");
                //Checkpoint
                System.out.println(IDS);

                pst = conn.prepareStatement("SELECT * FROM Kendaraan WHERE IDKendaraan ='" + NoPol + "'");
                rs = pst.executeQuery();

//                System.out.println(rs.next()&&NoPol.equals(rs.getString("IDKendaraan").replaceAll("\\s", "")));
                System.out.println("ID Kendaraan dari DB " + NoPol);
                System.out.println(NoPol.getClass().getSimpleName());

                if (rs.next() && NoPol.equals(rs.getString("IDKendaraan").replaceAll("\\s", ""))) {
                    String Ket = rs.getString("Keterangan").replaceAll("\\s", "");
                    System.out.println("INI KOK GAK DI PRINT ya?");
//                    String Ket = rs.getString("Keterangan").replaceAll("\\s", "");
                    String queryLokasi;
                    System.out.println("Cari Lokasi nih");
                    //Mencari lokasi yang kosong untuk ditempati
                    System.out.println(Ket);
                    System.out.println(Ket.equals("Mobil"));
//                    stmt1 = conn.createStatement();
//                    rsPenuh = stmt1.executeQuery("SELECT COUNT(*) AS totalKosong from Lokasi where Status='Kosong'");
//                    int countKosong = 0;
//                    while(rs1.next()){
//                    countKosong = rsPenuh.getInt("totalKosong");
//                    }
//                    if (countKosong == 0){
//                    JOptionPane.showMessageDialog(null,"Kendaraan sudah keluar");
//                    }
//            else {    
                    if (Ket.equals("Mobil")) {
                        stmt1 = conn.createStatement();
                        rscPenuh = stmt1.executeQuery("SELECT COUNT(*) AS totalcKosong from Lokasi where Status='Kosong' AND Keterangan='Mobil'");
                        int countcKosong = 0;
                        while(rscPenuh.next()){
                        countcKosong = rscPenuh.getInt("totalcKosong");
                        }
                        if (countcKosong == 0){
                        JOptionPane.showMessageDialog(null,"Parkiran Mobil Sudah Penuh");
                        }
                        else{
                        pst = conn.prepareStatement("SELECT * FROM Lokasi WHERE Status= 'Kosong' AND Keterangan='Mobil'");
                        rs2 = pst.executeQuery();
                    System.out.println("Udah dapet lokasinya tipe kendaraannya " + Ket);
                    //Mengupdate Lokasi yang available
                    if (rs2.next()) {
                        System.out.println("Belum nyentuh ini juga?");
                        String IDL = rs2.getString("IDLokasi").replaceAll("\\s", "");
                        pst = conn.prepareStatement("update Lokasi set Status = 'Terisi' where IDLokasi = '" + IDL + "'");
                        pst.executeUpdate();

                        pst = conn.prepareStatement("select COUNT(IDParkir) as \"Jumlah\" from PParkir");
                        rs = pst.executeQuery();
                        System.out.println("ID Lokasi yg terupdate adalah " + IDL);
                        if (rs.next()) {
                            String Jml = rs.getString("Jumlah");
                            int Jml1 = Integer.valueOf(Jml);
                            System.out.println(Jml);
                            pst = conn.prepareStatement("SELECT NamaLokasi FROM Lokasi WHERE IDLokasi ='" + IDL + "'");
                            rs4 = pst.executeQuery();
                            System.out.println("YEY udah sampe nyari jumlah");
//                            System.out.println(Tgl);// INi apa??1
                            if (rs4.next()) {
                                String NamLok = rs4.getString("NamaLokasi");
                                //Mengambil waktu sekarang
                                Date date = new Date();
                                java.sql.Date sqldate = new java.sql.Date(date.getTime());

                                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                                String strDate = dateFormat.format(sqldate);
//                                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
//                                Date date = new Date();
//                                System.out.println(date.getClass().getSimpleName());
//                                System.out.println(formatter.format(date));
//                                String strDate = formatter.format(date);
                                System.out.println("Udah sampai ngecek Jam Masuk nih");

                                String query7 = "insert into PParkir (IDParkir, TglParkir, JamMasuk, IDStaff, IDKendaraan, IDLokasi, Biaya) values (?,?,?,?,?,?,?)";
                                pst = conn.prepareStatement(query7);
                                pst.setString(1, "P" + (Jml1 + 1)); //Set ID automatis
                                pst.setString(2, strDate);
                                pst.setString(3, Jm);
                                pst.setString(4, IDS);
                                pst.setString(5, NoPol);
                                pst.setString(6, IDL);
                                pst.setString(7, "0");
//                                pst.setInt(7, 0);
                                pst.executeUpdate();

                                karcis.setText("=========== Karcis Parkir ===========\n" + "Tanggal : " + strDate + "\nJam Masuk : " + Jm
                                        + "\n" + "Petugas : " + NStaff + "\nJenis : " + Ket + "\nNoPolisi : " + NoPol + "\nLokasi : " + NamLok);

                            }
                        }
                    }
                        }
                    } else {
                        stmt2 = conn.createStatement();
                        rsmPenuh = stmt2.executeQuery("SELECT COUNT(*) AS totalmKosong from Lokasi where Status='Kosong' AND Keterangan='Motor'");
                        int countmKosong = 0;
                        while(rsmPenuh.next()){
                        countmKosong = rsmPenuh.getInt("totalmKosong");
                        }
                        if (countmKosong == 0){
                        JOptionPane.showMessageDialog(null,"Parkiran Motor Sudah Penuh");
                        }
                        else{
                        pst = conn.prepareStatement("SELECT * FROM Lokasi WHERE Status= 'Kosong' AND Keterangan='Motor'");
                        rs2 = pst.executeQuery();
                    System.out.println("Udah dapet lokasinya tipe kendaraannya " + Ket);
                    //Mengupdate Lokasi yang available
                    if (rs2.next()) {
                        System.out.println("Belum nyentuh ini juga?");
                        String IDL = rs2.getString("IDLokasi").replaceAll("\\s", "");
                        pst = conn.prepareStatement("update Lokasi set Status = 'Terisi' where IDLokasi = '" + IDL + "'");
                        pst.executeUpdate();

                        pst = conn.prepareStatement("select COUNT(IDParkir) as \"Jumlah\" from PParkir");
                        rs = pst.executeQuery();
                        System.out.println("ID Lokasi yg terupdate adalah " + IDL);
                        if (rs.next()) {
                            String Jml = rs.getString("Jumlah");
                            int Jml1 = Integer.valueOf(Jml);
                            System.out.println(Jml);
                            pst = conn.prepareStatement("SELECT NamaLokasi FROM Lokasi WHERE IDLokasi ='" + IDL + "'");
                            rs4 = pst.executeQuery();
                            System.out.println("YEY udah sampe nyari jumlah");
//                            System.out.println(Tgl);// INi apa??1
                            if (rs4.next()) {
                                String NamLok = rs4.getString("NamaLokasi");
                                //Mengambil waktu sekarang
                                Date date = new Date();
                                java.sql.Date sqldate = new java.sql.Date(date.getTime());

                                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                                String strDate = dateFormat.format(sqldate);
//                                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
//                                Date date = new Date();
//                                System.out.println(date.getClass().getSimpleName());
//                                System.out.println(formatter.format(date));
//                                String strDate = formatter.format(date);
                                System.out.println("Udah sampai ngecek Jam Masuk nih");

                                String query7 = "insert into PParkir (IDParkir, TglParkir, JamMasuk, IDStaff, IDKendaraan, IDLokasi, Biaya) values (?,?,?,?,?,?,?)";
                                pst = conn.prepareStatement(query7);
                                pst.setString(1, "P" + (Jml1 + 1)); //Set ID automatis
                                pst.setString(2, strDate);
                                pst.setString(3, Jm);
                                pst.setString(4, IDS);
                                pst.setString(5, NoPol);
                                pst.setString(6, IDL);
                                pst.setString(7, "0");
//                                pst.setInt(7, 0);
                                pst.executeUpdate();

                                karcis.setText("=========== Karcis Parkir ===========\n" + "Tanggal : " + strDate + "\nJam Masuk : " + Jm
                                        + "\n" + "Petugas : " + NStaff + "\nJenis : " + Ket + "\nNoPolisi : " + NoPol + "\nLokasi : " + NamLok);

                            }
                        }
                    }
                        }
                    }

//                    rs2 = pst.executeQuery();
//                    System.out.println("Udah dapet lokasinya tipe kendaraannya " + Ket);
//                    //Mengupdate Lokasi yang available
//                    if (rs2.next()) {
//                        System.out.println("Belum nyentuh ini juga?");
//                        String IDL = rs2.getString("IDLokasi").replaceAll("\\s", "");
//                        pst = conn.prepareStatement("update Lokasi set Status = 'Terisi' where IDLokasi = '" + IDL + "'");
//                        pst.executeUpdate();
//
//                        pst = conn.prepareStatement("select COUNT(IDParkir) as \"Jumlah\" from PParkir");
//                        rs = pst.executeQuery();
//                        System.out.println("ID Lokasi yg terupdate adalah " + IDL);
//                        if (rs.next()) {
//                            String Jml = rs.getString("Jumlah");
//                            int Jml1 = Integer.valueOf(Jml);
//                            System.out.println(Jml);
//                            pst = conn.prepareStatement("SELECT NamaLokasi FROM Lokasi WHERE IDLokasi ='" + IDL + "'");
//                            rs4 = pst.executeQuery();
//                            System.out.println("YEY udah sampe nyari jumlah");
////                            System.out.println(Tgl);// INi apa??1
//                            if (rs4.next()) {
//                                String NamLok = rs4.getString("NamaLokasi");
//                                //Mengambil waktu sekarang
//                                Date date = new Date();
//                                java.sql.Date sqldate = new java.sql.Date(date.getTime());
//
//                                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//                                String strDate = dateFormat.format(sqldate);
////                                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
////                                Date date = new Date();
////                                System.out.println(date.getClass().getSimpleName());
////                                System.out.println(formatter.format(date));
////                                String strDate = formatter.format(date);
//                                System.out.println("Udah sampai ngecek Jam Masuk nih");
//
//                                String query7 = "insert into PParkir (IDParkir, TglParkir, JamMasuk, IDStaff, IDKendaraan, IDLokasi, Biaya) values (?,?,?,?,?,?,?)";
//                                pst = conn.prepareStatement(query7);
//                                pst.setString(1, "P" + (Jml1 + 1)); //Set ID automatis
//                                pst.setString(2, strDate);
//                                pst.setString(3, Jm);
//                                pst.setString(4, IDS);
//                                pst.setString(5, NoPol);
//                                pst.setString(6, IDL);
//                                pst.setString(7, "0");
////                                pst.setInt(7, 0);
//                                pst.executeUpdate();
//
//                                karcis.setText("=========== Karcis Parkir ===========\n" + "Tanggal : " + strDate + "\nJam Masuk : " + Jm
//                                        + "\n" + "Petugas : " + NStaff + "\nJenis : " + Ket + "\nNoPolisi : " + NoPol + "\nLokasi : " + NamLok);
//
//                            }
//                        }
//                    }
//                    
//                    System.out.println(IDL);
//                        

                } else {
                    new SignUpKendaraan().setVisible(true);
                    this.setVisible(false);
                }

//                txtKarcis.setText("=========== Karcis Parkir ===========\n"+"Tanggal : ");
////                        +strDate+"\nJam Masuk : "+
////                                Jm+"\n"+"Petugas : "+NStaff+"\nJenis : "+KK1+"\nNoPolisi : "+jTextField2.getText()+"\nLokasi : "+NamLok);
            } else {
                JOptionPane.showMessageDialog(this, "ID Staff Tidak Tepat", "Error", JOptionPane.ERROR_MESSAGE);
            }

//            //Agar saat selesai action button langsung clear text Field
//            txtIDStaff.setText("");
//            txtIDKendaraan.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(HalamanUtama.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_jButtonParkirActionPerformed

    private void txtIDStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDStaffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDStaffActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        txtNopol.setText("");
        DatabaseStaff DBStaff = new DatabaseStaff();
        DBStaff.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        txtNopol.setText("");
        Map MobilMap = new Map();
        MobilMap.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        txtNopol.setText("");
        mapMotor MotorMap = new mapMotor();
        MotorMap.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        txtNopol.setText("");
        DatabaseKendaraan DBKendaraan = new DatabaseKendaraan();
        DBKendaraan.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null,"Apakah anda yakin akan keluar?", "Tutup Aplikasi", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION) {
        new Masuk().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void txtNopolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNopolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNopolActionPerformed

    private void jButtonKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKeluarActionPerformed
        if(txtIDStaff.getText().equals("") || txtNopol.getText().equals("")){
           JOptionPane.showMessageDialog(null,"Masukkan ID Staff dan Nomor Polisi"); 
        }
        else{
        System.out.println("Ini di tombol keluar");
        String NoPol = txtNopol.getText();
        // https://stackoverflow.com/questions/2763659/how-do-you-access-the-value-of-an-sql-count-query-in-a-java-program
        try {
            stmt = conn.createStatement();
            rs1 = stmt.executeQuery("SELECT COUNT(*) AS total from PParkir where IDKendaraan ='" + NoPol + "' and Biaya='0'");
            int count = 0;
            while(rs1.next()){
                count = rs1.getInt("total");
            }
            if (count == 0){
                JOptionPane.showMessageDialog(null,"Kendaraan sudah keluar");
            }
            else {        
            pst = conn.prepareStatement("Select * from PParkir where IDKendaraan ='" + NoPol + "'");
            rs = pst.executeQuery();
            System.out.println(rs1);
            int y = rs.getRow();
            System.out.println(y);
            //Deklarasi object yang berperilaku untuk memanggil meta data table
            ResultSetMetaData RSM = rs.getMetaData();
            int c = RSM.getColumnCount();
            Vector v2 = new Vector(); //Akan berisi beragam dari dari Tabel Parkir
            
            
            while (rs.next()) {
                System.out.println("Apakah kita ada di sini?");
//                Vector v2 = new Vector(); //Akan berisi beragam dari dari Tabel Parkir
                for (int i = 1; i <= c; i++) {
                    String IDP = (rs.getString("IDParkir"));
                    String IDS = (rs.getString("IDStaff"));
                    v2.add(rs.getString("TglParkir"));
                    v2.add(rs.getString("JamMasuk"));
                    v2.add(rs.getString("JamKeluar"));
                    v2.add(rs.getString("Biaya"));
//                    v2.add(rs.getString("Deleted"));
                    v2.add(rs.getString("IDLokasi"));
                    v2.add(rs.getString("IDKendaraan"));
//                    System.out.println(v2.get(2));
                }
            }
            System.out.println(v2.get(4).toString());
            pst = conn.prepareStatement("Select * from Lokasi where IDLokasi ='" + v2.get(4).toString() + "'");
            rs = pst.executeQuery();
            Vector VLok = new Vector(); //Akan berisi beragam dari dari Tabel Parkir
            while (rs.next()) {
                for (int i = 1; i <= c; i++) {
                VLok.add(rs.getString("IDLokasi"));
                VLok.add(rs.getString("NamaLokasi"));
                VLok.add(rs.getString("Keterangan"));
                VLok.add(rs.getString("Deleted"));
                }
            }
            //Update Tabel Lokasi
            System.out.println("KOK EROR DI UPDATE SIH??");
            pst = conn.prepareStatement("update Lokasi set Status=? where IDLokasi='" + v2.get(4).toString() + "'");
            pst.setString(1, "Kosong");
            pst.executeUpdate();
            System.out.println(v2.get(4).toString());
            System.out.println("Di sini Bagaimana?");
            pst = conn.prepareStatement("Select * from Kendaraan where IDKendaraan ='" + NoPol + "'");
            rs = pst.executeQuery();
            if (rs.next() && NoPol.equals(rs.getString("IDKendaraan").replaceAll("\\s", ""))) {
                String Ket = rs.getString("Keterangan").replaceAll("\\s", "");
                System.out.println("Problemnya di sini kah??" + Ket);
                String JM2 = v2.get(1).toString();
                if ("Mobil".equals(Ket)) {
                    System.out.println("Atau di sini?");
                    int Biaya = 5000;
                    pst = conn.prepareStatement("update PParkir set JamKeluar=?, Biaya=? where IDKendaraan='" + NoPol + "'");
                    pst.setString(1, Jm.toString());
                    pst.setInt(2, Biaya);
                    pst.executeUpdate();

                    System.out.println("Terus di mana dong ?? T_T ");

                    System.out.println("Mari kita tebak di sini keknya ?");

                    karcis.setText("=========== Karcis Parkir ===========\n" + "Tanggal : " + Tgl + "\nJam Masuk : "
                            + JM2 + "\n" + "\nJenis : " + Ket + "\nNoPolisi : " + txtNopol.getText()+"\nLokasi :"+VLok.get(1).toString()
                            + "\nJam Keluar : " + Jm + "\nBiaya : " + Biaya);

                } else {
                    System.out.println("Motor itu harusnya masuk di sini gak sih?");
                    int Biaya = 2000;
                    //Update Tabel Lokasi
                    pst = conn.prepareStatement("update Lokasi set Status=? where IDLokasi='" + v2.get(4).toString() + "'");
                    pst.setString(1, "Kosong");
                    pst.executeUpdate();

                    //Update Tabel Parkir 
                    pst = conn.prepareStatement("update PParkir set JamKeluar=?, Biaya=? where IDKendaraan='" + NoPol + "'");
                    pst.setString(1, Jm.toString());
                    pst.setInt(2, Biaya);
                    pst.executeUpdate();
                    System.out.println("Mari kita tebak di sini keknya ?");

                    karcis.setText("=========== Karcis Parkir ===========\n" + "Tanggal : " + Tgl + "\nJam Masuk : "
                            + JM2 + "\n" + "\nJenis : " + Ket + "\nNoPolisi : " + txtNopol.getText()+"\nLokasi :"+VLok.get(1).toString()
                            + "\nJam Keluar : " + Jm + "\nBiaya : " + Biaya);

                }
//                String JM2 = v2.get(6).toString();

            }
                    }

        } catch (SQLException ex) {
            Logger.getLogger(HalamanUtama.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_jButtonKeluarActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        txtNopol.setText("");
        Lokasi DBLokasi = new Lokasi();
        DBLokasi.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HalamanUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HalamanUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HalamanUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HalamanUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//System.out.println(id);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HalamanUtama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonKeluar;
    private javax.swing.JButton jButtonParkir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea karcis;
    private javax.swing.JLabel labelNama;
    private javax.swing.JTextField txtIDStaff;
    private javax.swing.JTextField txtNopol;
    // End of variables declaration//GEN-END:variables
}
