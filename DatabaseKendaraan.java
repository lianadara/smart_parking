/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tbd;

import java.sql.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

public class DatabaseKendaraan extends javax.swing.JFrame {
    DefaultTableModel tabModel;
    ResultSet RsProduk=null;
    /**
     * Creates new form DatabaseKendaraan
     */
    public DatabaseKendaraan() {
        initComponents();
        Connect();
        KendaraanTable();
//        tampilData();
    }
    // Menyiapkan objek yang diperlukan untuk mengelola database
    Connection conn;
    Statement stmt;
    ResultSet rs,rs1;
    PreparedStatement pst, pst1;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2ClearSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Kendaraan");
        setBackground(new java.awt.Color(255, 235, 205));

        jPanel2.setBackground(new java.awt.Color(255, 230, 208));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Database Kendaraan", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 24), new java.awt.Color(139, 69, 19))); // NOI18N

        jComboBox1.setBackground(new java.awt.Color(244, 164, 96));
        jComboBox1.setForeground(new java.awt.Color(139, 69, 19));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Parkir", "ID Kendaraan", "ID Staff", "ID Lokasi", "Tanggal Parkir", "Jam Masuk", "Jam Keluar", "Biaya", " " }));

        txtSearch.setBackground(new java.awt.Color(255, 248, 220));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jButtonSearch.setBackground(new java.awt.Color(244, 164, 96));
        jButtonSearch.setForeground(new java.awt.Color(139, 69, 19));
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(255, 230, 208));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Parkir", "ID Kendaraan", "ID Staff", "ID Lokasi", "Tanggal Parkir", "Jam Masuk", "Jam Keluar", "Biaya"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(244, 164, 96));
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2ClearSearch.setBackground(new java.awt.Color(244, 164, 96));
        jButton2ClearSearch.setText("Clear");
        jButton2ClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ClearSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSearch)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2ClearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jButton2ClearSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

//public void tampilData(){
//    try {
//        Object[] judul_kolom = {"ID Parkir", "ID Kendaraan", "ID Staff", "ID Lokasi", "Tanggal Parkir", "Jam Masuk", "Jam Keluar", "Biaya"};
//            tabModel=new DefaultTableModel(null,judul_kolom);
//            jTable1.setModel(tabModel);
//            
////            Connection conn=(Connection)koneksi.koneksiDB();
//            Statement stt=conn.createStatement();
//            tabModel.getDataVector().removeAllElements();
//            
//            RsProduk=stt.executeQuery("SELECT * from PParkir ");  
//            while(RsProduk.next()){
//                Object[] data={
//                    RsProduk.getString("IDParkir"),
//                    RsProduk.getString("IDKendaraan"),
//                    RsProduk.getString("IDStaff"),
//                    RsProduk.getString("IDLokasi"),
//                    RsProduk.getString("TglParkir"),
//                    RsProduk.getString("JamMasuk"),
//                    RsProduk.getString("JamKeluar"),
//                    RsProduk.getString("Biaya")
//                };
//               tabModel.addRow(data);
//            }                
//        } catch (Exception ex) {
//        System.err.println(ex.getMessage());
//        }
//}

private void cariData(String key){
        try{
            Object[] judul_kolom = {"ID Parkir", "ID Kendaraan", "ID Staff", "ID Lokasi", "Tanggal Parkir", "Jam Masuk", "Jam Keluar", "Biaya"};
            tabModel=new DefaultTableModel(null,judul_kolom);
            jTable1.setModel(tabModel);
            
//            Connection conn=(Connection)koneksi.koneksiDB();
            Statement stt=conn.createStatement();
            tabModel.getDataVector().removeAllElements();
            
            RsProduk=stt.executeQuery("SELECT * from PParkir WHERE IDParkir LIKE '%"+key+"%' OR IDKendaraan LIKE '%"+key+"%' OR IDStaff LIKE '%"+key+"%' OR IDLokasi LIKE '%"+key+"%' OR TglParkir LIKE '%"+key+"%' OR JamMasuk LIKE '%"+key+"%' OR JamKeluar LIKE '%"+key+"%' OR Biaya LIKE '%"+key+"%'");  
            while(RsProduk.next()){
                Object[] data={
                    RsProduk.getString("IDParkir"),
                    RsProduk.getString("IDKendaraan"),
                    RsProduk.getString("IDStaff"),
                    RsProduk.getString("IDLokasi"),
                    RsProduk.getString("TglParkir"),
                    RsProduk.getString("JamMasuk"),
                    RsProduk.getString("JamKeluar"),
                    RsProduk.getString("Biaya")         
                };
               tabModel.addRow(data);
            }                
        } catch (Exception ex) {
        System.err.println(ex.getMessage());
        }
    }
    
// Membuat Connnect Function
    public void Connect() {
        String url = "jdbc:jtds:sqlserver://127.0.0.1:1433/SmartParking"; //buka =  nama database yang digunakan 
        try {       
            conn = DriverManager.getConnection(url, "kelompok3", "semangat");
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseKendaraan.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    //Method menampilkan data di Tabel GUI
    public void KendaraanTable() {
        try {
            pst = conn.prepareStatement("select * from PParkir");
            rs = pst.executeQuery();
            pst1 = conn.prepareStatement("select * from Kendaraan");
            rs1 = pst1.executeQuery();
            //Deklarasi object yang berperilaku untuk memanggil meta data table
            ResultSetMetaData RSM = rs.getMetaData();
            int c = RSM.getColumnCount();
            DefaultTableModel DF = (DefaultTableModel) jTable1.getModel();
            DF.setRowCount(0);
            ResultSetMetaData RSM1 = rs1.getMetaData();
            int c1 = RSM1.getColumnCount();
            DefaultTableModel DF1 = (DefaultTableModel) jTable1.getModel();
            DF1.setRowCount(0);

            //Memasukkan data SQL ke Table GUI
            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("IDParkir"));
                    v2.add(rs.getString("IDKendaraan"));
                    v2.add(rs.getString("IDStaff"));
                    v2.add(rs.getString("IDLokasi"));
                    v2.add(rs.getString("TglParkir"));
                    v2.add(rs.getString("JamMasuk"));
                    v2.add(rs.getString("JamKeluar"));
                    v2.add(rs.getString("Biaya"));
                    
//                    v2.add(rs1.getString("Keterangan"));
                }
                DF.addRow(v2);
            }

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseKendaraan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        String ComboItem = jComboBox1.getSelectedItem().toString();
        String Keyword = txtSearch.getText();
        //txtSearch.setText(jComboBox1.getSelectedItem().toString());
        //ID Kendaraan, ID Parkir, ID Lokasi, Tanggal Parkir, Jam Masuk, Jam Keluar, Biaya, ID Staff
        //Dari Code Tabel untuk menampilkan data di tabel
        try {
            //Karena Combo boxnya ada beberapa pilihan dan perlu querynya bergantung ke sana perlu dibikin if else statements
            if (ComboItem == "ID Parkir") {
                pst = conn.prepareStatement("select * from PParkir where IDParkir = ?");
            } else if (ComboItem == "ID Staff") {
                pst = conn.prepareStatement("select * from PParkir where IDStaff = ?");
            } 
            else if (ComboItem == "ID Kendaraan") {
                pst = conn.prepareStatement("select * from PParkir where IDKendaraan = ?");
            } else if (ComboItem == "ID Lokasi") {
                pst = conn.prepareStatement("select * from PParkir where IDLokasi= ?");
            } else if (ComboItem == "Tanggal Parkir") {
                pst = conn.prepareStatement("select * from PParkir where TglParkir = ?");
            } else if (ComboItem == "Jam Masuk") {
                pst = conn.prepareStatement("select * from PParkir where JamMasuk = ?");
            } else if (ComboItem == "Jam Keluar") {
                pst = conn.prepareStatement("select * from PParkir where JamKeluar = ?");
            } else if (ComboItem == "Biaya") {
                pst = conn.prepareStatement("select * from PParkir where Biaya = ?");
            } 
            
            pst.setString(1, Keyword);
            rs = pst.executeQuery();

            //Deklarasi object yang berperilaku untuk memanggil meta data table
            ResultSetMetaData RSM = rs.getMetaData();
            int c = RSM.getColumnCount();
//            JOptionPane.showMessageDialog(this, "Nilai Combo Item yg terpilih " + ComboItem);
            DefaultTableModel DF = (DefaultTableModel) jTable1.getModel();
            DF.setRowCount(0);

//ID Kendaraan, ID Parkir, ID Lokasi, Tanggal Parkir, Jam Masuk, Jam Keluar, Biaya, ID Staff
            //Memasukkan data SQL ke Table GUI
            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("IDParkir"));
                    v2.add(rs.getString("IDKendaraan"));
                    v2.add(rs.getString("IDStaff"));
                    v2.add(rs.getString("IDLokasi"));
                    v2.add(rs.getString("TglParkir"));
                    v2.add(rs.getString("JamMasuk"));
                    v2.add(rs.getString("JamKeluar"));
                    v2.add(rs.getString("Biaya"));
                }
                DF.addRow(v2);
            }

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseKendaraan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        HalamanUtama obj = new HalamanUtama();
        this.setVisible(false);
        obj.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ClearSearchActionPerformed
        try {
                Class.forName("net.sourceforge.jtds.jdbc.Driver");
                String url = "jdbc:jtds:sqlserver://127.0.0.1:1433/SmartParking"; 
                Connection koneksi = DriverManager.getConnection(url, "kelompok3", "semangat"); 
                String sql = "SELECT * FROM PParkir";
                Statement state = koneksi.createStatement();
                //it will return a result set
                ResultSet rs = state.executeQuery(sql);
                
                ResultSetMetaData rsmetadata = rs.getMetaData();
                //it stores the number of columns
                int columns = rsmetadata.getColumnCount();
                
                DefaultTableModel dtn = new DefaultTableModel();
                Vector columns_name = new Vector();
                Vector data_rows = new Vector();
                
                for(int i=1; i<=columns; i++){
                    columns_name.addElement(rsmetadata.getColumnName(i));    
                }
                dtn.setColumnIdentifiers(columns_name);
                
                while(rs.next()){
                    
                    data_rows = new Vector();
                    for(int j=1; j<=columns; j++){
                    data_rows.addElement(rs.getString(j));
                    
                    }
                    dtn.addRow(data_rows);
                }
                
                jTable1.setModel(dtn);
                txtSearch.setText("");
            }
        catch (Exception e){
        }
    }//GEN-LAST:event_jButton2ClearSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String key=txtSearch.getText();
//        System.out.println(key);
        
        if(key!=""){
            cariData(key);
        }
        else{
            KendaraanTable();
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
        DefaultTableModel d1 = (DefaultTableModel) jTable1.getModel();
        int SelectIndex = jTable1.getSelectedRow();

        //Agar saat dipilih data di table langsung muncul di Baris2 yang ada di Text
        String bookno = d1.getValueAt(SelectIndex, 0).toString();
//
//        txtIDPar.setText(d1.getValueAt(SelectIndex, 0).toString());
//        txtIDKen.setText(d1.getValueAt(SelectIndex, 1).toString());
//        txtIDLok.setText(d1.getValueAt(SelectIndex, 2).toString());
//        txtIDStaff.setText(d1.getValueAt(SelectIndex, 3).toString());
        
        //Bisa dipake bisa enggak aku cenderung agar saat save dia eror
        //Agar saat mouse click ke data di table btn Save tidak bisa digunakan
//        btnSave.setEnabled(false);

    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseKendaraan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseKendaraan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseKendaraan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseKendaraan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseKendaraan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2ClearSearch;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
